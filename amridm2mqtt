#!/usr/bin/env python3
'''
Runs rtlamr to watch for IDM broadcasts from power meter. If meter id
is in the list, usage is sent to 'readings/{meter id}/meter_reading'
topic on the MQTT broker specified in settings.

WATCHED_METERS = A Python list indicating those meter IDs to record and post.
MQTT_HOST = String containing the MQTT server address.
MQTT_PORT = An int containing the port the MQTT server is active on.

'''
import os
import subprocess
import signal
import sys
import time

import paho.mqtt.publish as publish
import settings
import messagetypes


def shutdown(signum, frame):
    '''uses signal to shutdown and hard kill opened processes and self'''
    rtltcp.send_signal(15)
    rtlamr.send_signal(15)
    time.sleep(1)
    rtltcp.send_signal(9)
    rtlamr.send_signal(9)
    sys.exit(0)


def debug_print(*args, **kwargs):
    if DEBUG:
        print(*args, **kwargs)


def get_last_interval(meter_id):
    return last_reading.get(meter_id, (None))


def set_last_interval(meter_id, interval_ID):
    last_reading[meter_id] = (interval_ID)


def send_mqtt(topic, payload):
    '''send data to MQTT broker defined in settings'''
    try:
        publish.single(topic, payload=payload, qos=1,
                       hostname=settings.MQTT_HOST, port=settings.MQTT_PORT, auth=auth)
    except Exception as ex:
        print("MQTT Publish Failed: " + str(ex))


def send_meter_reading(reading, meter):
    current_reading_in_kwh = (reading * settings.WH_MULTIPLIER) / 1000
    debug_print('Sending meter {} reading: {}'.format(
        meter, current_reading_in_kwh))
    send_mqtt('readings/{}/meter_reading'.format(meter),
              str(current_reading_in_kwh))


def send_meter_usage(usage, meter):
    rate = usage * settings.WH_MULTIPLIER * settings.READINGS_PER_HOUR
    debug_print('Sending meter {} rate: {}'.format(meter, rate))
    send_mqtt('readings/{}/meter_rate'.format(meter), str(rate))


def match_meterid(id):
    if settings.WATCHED_METERS and id not in settings.WATCHED_METERS:
        debug_print("meter id: ", id,
                    " doesn't match wanted meters: ", settings.WATCHED_METERS)
        return False
    return True


def parse_idm(flds):
    # make sure the meter id is one we want
    meter_id = int(flds[messagetypes.IDM_METER_ID])
    if match_meterid(meter_id):
        # get some required info:
        # current meter reading
        # current interval id
        # most recent interval usage
        current_reading = int(flds[messagetypes.IDM_CURRENT_READING])
        current_interval = int(flds[messagetypes.IDM_CURRENT_INTERVAL])
        interval_usage = int(flds[messagetypes.IDM_MOST_RECENT_INTERVAL_USAGE])
        # retreive the interval id of the last time we sent data
        interval_last = get_last_interval(meter_id)
        # if they don't match the current interval, send the data
        if current_interval != interval_last:
            send_meter_reading(current_reading, meter_id)
            send_meter_usage(interval_usage, meter_id)
            # store interval ID to avoid duplicating data
            set_last_interval(meter_id, current_interval)


def parse_scm(flds):
    # make sure the meter id is one we want
    meter_id = int(flds[messagetypes.SCM_METER_ID])
    if match_meterid(meter_id):
        # get some required info:
        # current meter reading
        current_reading = int(flds[messagetypes.SCM_CURRENT_READING])
        # if they don't match the current interval, send the data
        send_meter_reading(current_reading, meter_id)


if __name__ == "__main__":

    DEBUG = settings.DEBUG

    # Handle signals
    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGINT, shutdown)

    # stores last interval id to avoid duplication, includes getter and setter
    last_reading = {}

    # check and set our authentication
    auth = None
    if len(settings.MQTT_USER) and len(settings.MQTT_PASSWORD):
        auth = {'username': settings.MQTT_USER,
                'password': settings.MQTT_PASSWORD}

    # start the rtl_tcp program
    debug_print("Starting rtl_tcp...")
    rtltcp = subprocess.Popen([settings.RTL_TCP + " > /dev/null 2>&1 &"], shell=True,
                              stdin=None, stdout=None, stderr=None, close_fds=True)
    debug_print("Started rtl_tcp, waiting 5 seconds")
    time.sleep(5)

    # start the rtlamr program
    rtlamr_cmd = [settings.RTLAMR,
                  f'-msgtype={settings.MESSAGE_TYPE}', '-format=csv']
    debug_print("Starting rtlamr:", rtlamr_cmd)
    rtlamr = subprocess.Popen(
        rtlamr_cmd, stdout=subprocess.PIPE, universal_newlines=True)

    debug_print("Processing rtlamr output")
    while True:
        try:
            # read a line from the process stdout
            amrline = rtlamr.stdout.readline().strip()
            flds = amrline.split(',')
            debug_print(amrline)

            # Try to determine message type based on the number of fields
            field_count = len(flds)
            if field_count == messagetypes.IDM_FIELDS:
                debug_print("Number of fields suggests message type idm, parsing...")
                parse_idm(flds)
            elif field_count == messagetypes.SCM_FIELDS:
                debug_print("Number of fields suggests message type idm, parsing...")
                parse_scm(flds)
            else:
                debug_print("Unsupported number of fields: ", field_count)
                continue

        except Exception as e:
            debug_print('Exception squashed! {}: {}', e.__class__.__name__, e)
            time.sleep(2)
